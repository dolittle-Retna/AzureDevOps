parameters:
  name: 'Versioning'
  buildConfiguration: 'Release'
  pool: Default

steps:
- template: ../Versioning/handle_version.yml
- bash: |
    if [ "$(Version)" != "empty" ]
    then
        URL=$(Build.Repository.Uri)
        BRANCH=$(Build.SourceBranch) 
        REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
        BRANCH=$(echo $BRANCH | cut -d "/" -f 3)
        
        git config user.name \"$GIT_USERNAME\"
        git config user.email \"$GIT_EMAIL\"

        echo Triggering new release of version "$(Version)"
        
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ~/.npmrc

        WORKSPACES=$(jq '.workspaces' package.json)
        if [ "$WORKSPACES" = null ]
        then
            echo Releasing single package
            JSON=$(jq -r -e --arg ver $(Version) '.version = $ver' package.json)
            echo "$JSON" > package.json
            git add package.json
            npm publish
            git commit -m "Increment version"
            git push https://$GIT_USERNAME:$PAT@github.com/$REPO HEAD:$BRANCH

            git tag -d $(Version) && git tag $(Version)
            git push https://$GIT_USERNAME:$PAT@github.com/$REPO :$(Version)
            git push https://$GIT_USERNAME:$PAT@github.com/$REPO $(Version)
        else
            echo "Releasing multiple packages"
            for package in Source/*/package.json
            do
                echo "$package"
                JSON=$(jq -r -e --arg ver $(Version) '.version = $ver' ./"$package")
                echo "$JSON" > ./"$package"
                dir=$(dirname "$package")
                git add ./"$package"
                npm publish ./"$dir"   
            done

            git commit -m "Increment versions"
            git push https://$GIT_USERNAME:$PAT@github.com/$REPO HEAD:$BRANCH

            git tag -d $(Version) && git tag $(Version)
            git push https://$GIT_USERNAME:$PAT@github.com/$REPO :$(Version)
            git push https://$GIT_USERNAME:$PAT@github.com/$REPO $(Version)
        fi
    else
        echo "No new version to release"
    fi
  displayName: Handling release
  env:
    NPM_TOKEN: $(NpmToken)
    GIT_USERNAME: $(GitUsername)
    GIT_EMAIL: $(GitEmail)
    PAT: $(CascadingBuild)
