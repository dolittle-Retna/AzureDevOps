
steps:
- task: NodeTool@0
  displayName: 'Ensuring version'
  inputs:
    versionSpec: '>=12.0.0'

- script: npm i yarn -g
  displayName: Installing yarn

- template: ../Versioning/set_version_variable.yml

- bash: |
    setup () {
        set -o nounset
    }
    echoerr () { 
        printf "%s\n" "$*" >&2;
    }
    setup_git_config () {
        git config user.name \"$GIT_USERNAME\"
        git config user.email \"$GIT_EMAIL\"
    }
    setup_npm_token () {
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
    }
    push_all_to_git () {
        git commit -m "Increment version"
        git push https://"${GIT_USERNAME}":"${PAT}"@github.com/"${REPO}" HEAD:"$BRANCH"

        git tag "$VERSION"
        git push https://$GIT_USERNAME:$PAT@github.com/$REPO "$VERSION"
    }
    release_single_package () {
        echo Releasing single package
        local JSON=$(jq -r -e --arg ver "$VERSION" '.version = $ver' package.json)
        echo "$JSON" > package.json
        git add package.json
        npm publish
        push_all_to_git
    }
    release_workspace () {
        echo "Releasing multiple packages"
        for package in Source/*/package.json
        do
            echo "$package"
            local JSON=$(jq -r -e --arg ver "$VERSION" '.version = $ver' ./"$package")
            echo "$JSON" > ./"$package"
            local dir=$(dirname "$package")
            git add ./"$package"
            npm publish ./"$dir"   
        done
        push_all_to_git
    }
    main () {
        setup
        echo "$Version"
        echo "$VERSION"
        if [ "$VERSION" != "empty" ]
        then
            echo Triggering new release of version "$VERSION"
            URL=$(Build.Repository.Uri)
            BRANCH=$(Build.SourceBranch) 
            REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
            BRANCH=$(echo $BRANCH | cut -d "/" -f 3)
            
            setup_git_config

            setup_npm_token
            
            WORKSPACES=$(jq '.workspaces' package.json)
            if [ "$WORKSPACES" = null ]
            then
                release_single_package
            else
               release_workspace
            fi
        else
            echoerr No new version to release
        fi
    }
    main
  displayName: Handling release
  env:
    NPM_TOKEN: $(NpmToken)
    GIT_USERNAME: $(GitUsername)
    GIT_EMAIL: $(GitEmail)
    PAT: $(CascadingBuild)
