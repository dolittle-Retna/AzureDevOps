parameters:
  name: 'DotNetCore_Framework_Job'
  buildConfiguration: 'Release'
  pool: Default
  CASCADES: ''

jobs:
- job: 'DotNetCore_Build'
  pool: ${{ parameters.pool }}
  variables:
  - group: global-var-pipelines

  steps:
  - script: |
      export VERSION=$(git tag --sort=-version:refname | head -1)
      echo The version is $(VERSION)
    displayName: Show version

  - checkout: self
    submodules: recursive

  - task: DotNetCoreInstaller@0
    inputs:
      version: '2.2.203'

  - task: DotNetCoreCLI@2
    displayName: Restore from nuget
    inputs:
      command: 'restore'
      feedsToUse: 'select'
      versioningScheme: 'off'
      nuGetFeedType: 'internal'
      nugetConfigPath: $(Build.ArtifactStagingDirectory)


  - task: DotNetCoreCLI@2
    displayName: Build release
    inputs:
      command: build
      projects: 'Source/**/*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }}' # Update this to match your need
      packagesDirectory: $(Build.ArtifactStagingDirectory)
  
  - task: DotNetCoreCLI@2
    displayName: Run Tests
    inputs:
      command: test
      projects: 'Specifications/**/*.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }}'
      
  - task: DotNetCoreCLI@2
    displayName: Packing
    inputs:
      command: 'pack'
      outputDir: '$(Build.ArtifactStagingDirectory)'

  - template: cascades.yml
    parameters:
      CASCADES: ${{ parameters.CASCADES }}

- job: 'Versioning'
  pool: Default
  dependsOn: DotNetCore_Build
  condition: succeeded()
  steps:
  - template: ../Versioning/handle_version_tag.yml

- job: 'Release
  pool: Default
  dependsOn: 'Versioning'
  condition: succeeded()
  variables:
  - group: global-var-pipelines

  steps:
  
  - task: NuGetCommand@2
    displayName: Push Nuget packs
    inputs:
      command: push
      nugetFeedType: 'external'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      publishFeedCredentials: 'nuget_credential'


- job: 'Documentation'
  pool: Default
  dependsOn: ${{ parameters.name }}
  condition: always()
  variables:
  - group: global-var-pipelines
  steps:
  - template: ../Documentation/documentation.yml
   
   
# echo PullRequest  49e27cc18f57870206171925a8c540abdac7bbfb 2.0.0
# echo IndividualCI 036100265b6d83d536827451131bf8c306ce9d43 2.0.0
