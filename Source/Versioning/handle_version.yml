parameters:
  name: 'Versioning'
  buildConfiguration: 'Release'
  pool: Default
  CASCADES: ''  `
  
jobs:
- jobs: ${{ parameters.name }}
  pool: ${{ parameters.pool }}
  
  steps:
  - task: Bash@3
      inputs:
        arguments: ${{ parameters.LABEL }}
        targetType: inline
  
  - bash: |
      URL=$(Build.Repository.Uri)
      REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
      LABEL=`GET https://api.github.com/repos/$REPO/pulls\?state\=all | tr ',' '\n' | grep labels | head -1 | cut -d ":" -f 2 | tr -d '[' | tr -d ']'
      VERSION=$(git tag --sort=-version:refname | head -1)
      MAJOR=`echo $VERSION | awk -F "." '{print $1}'`
      MINOR=`echo $VERSION | awk -F "." '{print $2}'`
      PATCH=`echo $VERSION | awk -F "." '{print $3}'`
      STATUS=`GET https://api.github.com/repos/$REPO/pulls\?state\=all | tr ',' '\n' | grep merged_at | head -1 | cut -d ":" -f 2 | tr -d '"'`
if [ "$STATUS" != "null" ]
then
      if [ "$LABEL" = "major" ]
  ##increase major and don't cascade
      then
        MAJOR=$((MAJOR+1))
        MINOR="0"
        PATCH="0"
        parameters.CASCADES=NULL
      
      elif [ "$LABEL" = "minor" ]
  ##increase minor -> has to cascade
      then
        MINOR=$((MINOR+1))
        PATCH="0"
      
      else
  ##its a patch -> has to cascade
        PATCH=$((PATCH+1))
      fi
      
      git tag -a "$MAJOR"."$MINOR"."$PATCH" -m ""
      echo "No longer in version $VERSION"
      echo "New version : $MAJOR.$MINOR.$PATCH"
      git push --tags
fi
      export VERSION=$(git tag --sort=-version:refname | head -1)
  ##to be continued
    displayName: Update Version tag
