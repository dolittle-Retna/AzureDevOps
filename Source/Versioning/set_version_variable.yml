steps:
- bash: |
    setup () {
        set -o nounset
    }
    echoerr () { 
        printf "%s\n" "$*" >&2;
    }
    get_labels_from_merged_pull_request () {
        local MERGED_PR_JSON=$(curl https://api.github.com/repos/$REPO/pulls\?state\=all | jq '.[] | select(.merge_commit_sha=="'$COMMIT_SHA'")')
        local LABELS=$(echo $MERGED_PR_JSON | jq '.labels | .[] | .name' -r)
        echo "$LABELS"
    }
    get_labels_from_not_merged_pull_request () {
        local MERGED_PR_JSON=$(curl https://api.github.com/repos/$REPO/pulls\?state\=all | jq '.[] | select(.head.sha=="'$COMMIT_SHA'")')
        local LABELS=$(echo $MERGED_PR_JSON | jq '.labels | .[] | .name' -r)
        echo "$LABELS"
    }
    get_latest_version_tag () {
        local TAG_REFS=$(git -c 'versionsort.suffix=-' ls-remote --refs --sort=-v:refname)
        while [ ! "$TAG_REFS" ]
        do
            sleep 1
        done

        local VERSION=$(echo "$TAG_REFS" | grep -o -E "refs/tags/\S+" | awk -F "tags/" '{print $2}' | grep -o -e "^[0-9]\+\.[0-9]\+\.[0-9]\+$" | head -1)
        echo "$VERSION"
    }

    main () {
        setup
        URL=$(Build.Repository.Uri)
        BRANCH=$(Build.SourceBranch) 
        COMMIT_SHA=$(Build.SourceVersion)
        REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
        BRANCH=$(echo $BRANCH | cut -d "/" -f 3)
        
        if [ "$BRANCH" = "master" ]
        then
            echo Commit has been made to master.
            echo "##vso[task.setvariable variable=IsMerge;isOutput=true]true"

            LABELS=$(get_labels_from_merged_pull_request)
            MAJOR_LABEL=$(echo "$LABELS" | grep -E '^major$')
            MINOR_LABEL=$(echo "$LABELS" | grep -E '^minor$')
            PATCH_LABEL=$(echo "$LABELS" | grep -E '^patch$')
            echo "Got labels from pull request:"
            echo "$LABELS"
        else
            echo No commit to master
            echo "##vso[task.setvariable variable=IsMerge;isOutput=true]false"
            
            LABELS=$(get_labels_from_not_merged_pull_request)
            MAJOR_LABEL=$(echo "$LABELS" | grep -E '^major$')
            MINOR_LABEL=$(echo "$LABELS" | grep -E '^minor$')
            PATCH_LABEL=$(echo "$LABELS" | grep -E '^patch$')
            echo "Got labels from pull request:"
            echo "$LABELS"
        fi

        if [ "$MAJOR_LABEL" = "major" ] || [ "$MINOR_LABEL" = "minor" ] || [ "$PATCH_LABEL" = "patch" ]]
        then
            echo "Getting version tag..."
            
            VERSION=$(get_latest_version_tag)
            NEW_PROJECT=false
            if [ ! "$VERSION" ]
            then
                NEW_PROJECT=true
                VERSION=1.0.0
                echo No version tag found. Setting version to "$VERSION"
            fi
            MAJOR=`echo $VERSION | awk -F "." '{print $1}'`
            MINOR=`echo $VERSION | awk -F "." '{print $2}'`
            PATCH=`echo $VERSION | awk -F "." '{print $3}'`
            
            if [ "$MAJOR_LABEL" = "major" ] && [ "$NEW_PROJECT" = false ]
            then
                echo "New major release"
                MAJOR=$((MAJOR+1))
                MINOR="0"
                PATCH="0"

            elif [ "$MINOR_LABEL" = "minor" ] && [ "$NEW_PROJECT" = false ]
            then
                echo "New minor release"
                MINOR=$((MINOR+1))
                PATCH="0"
            elif [ "$PATCH_LABEL" = "patch" ] && [ "$NEW_PROJECT" = false ]
            then
                echo "New patch release"
                PATCH=$((PATCH+1))
            elif [ "$COMMIT_MESSAGE" = "$CASCADING_BUILD_MESSAGE" ] && [ "$NEW_PROJECT" = false ]
            then
                echo "New patch release, dependency has been upgraded."
                PATCH=$((PATCH+1))
            fi
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "##vso[task.setvariable variable=Version;isOutput=true]$NEW_VERSION"
            echo Previous version "$VERSION"
            echo New version "$NEW_VERSION"
        else
            echoerr No label triggering new version
            echo "##vso[task.setvariable variable=Version;isOutput=true]empty"
        fi
    }
    main

  displayName: Setting version pipeline variable
  name: set_version
  env:
    CASCADING_BUILD_MESSAGE: $(CascadingTriggerMessage)
