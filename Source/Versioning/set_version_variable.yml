steps:
- bash: |
    setup () {
        set -o nounset
    }
    echoerr () { 
        printf "%s\n" "$*" >&2;
    }
    get_labels_from_merged_pull_request () {
        local MERGED_PR_JSON=$(curl https://api.github.com/repos/$REPO/pulls\?state\=all | jq '.[] | select(.merge_commit_sha=="'$COMMIT_SHA'")')
        local LABELS=$(echo $MERGED_PR_JSON | jq '.labels | .[] | .name' -r)
        echo "$LABELS"
    }
    get_labels_from_not_merged_pull_request () {
        local MERGED_PR_JSON=$(curl https://api.github.com/repos/$REPO/pulls\?state\=all | jq '.[] | select(.head.sha=="'$(System.PullRequest.SourceCommitId)'")')
        local LABELS=$(echo $MERGED_PR_JSON | jq '.labels | .[] | .name' -r)
        echo "$LABELS"
    }
    get_latest_version_tag () {
        local TAG_REFS=$(git -c 'versionsort.suffix=-' ls-remote --refs --sort=-v:refname)
        while [ ! "$TAG_REFS" ]
        do
            sleep 1
        done

        local VERSION=$(echo "$TAG_REFS" | grep -o -E "refs/tags/\S+" | awk -F "tags/" '{print $2}' | grep -o -e "^[0-9]\+\.[0-9]\+\.[0-9]\+$" | head -1)
    }
    get_preview_version_tag () {
        local TAG_REFS=$(git -c 'versionsort.suffix=-' ls-remote --refs --sort=-v:refname)
        while [ ! "$TAG_REFS" ]
        do
            sleep 1
        done

        local VERSION=$(echo "$TAG_REFS" | grep -o -E "refs/tags/\S+" | awk -F "tags/" '{print $2}' | grep -o -e "^[0-9]\+\.[0-9]\+\.[0-9]\+\-\?.\?*\+[0-9]\?*\+$" | head -1)
        echo "$VERSION"
    }

    main () {
        setup
        URL=$(Build.Repository.Uri)
        BRANCH=$(Build.SourceBranch) 
        COMMIT_SHA=$(Build.SourceVersion)
        REPO=`echo "$URL" | awk -F ".com/" '{ print $2 }'`
        BRANCH=$(echo $BRANCH | cut -d "/" -f 3)
        
        if [ "$BRANCH" = "master" ]
        then
            echo Commit has been made to master.
            echo "##vso[task.setvariable variable=IsMerge;isOutput=true]true"

            LABELS=$(get_labels_from_merged_pull_request)
            echo "Got labels from pull request:"
            echo "$LABELS"
            MAJOR_LABEL=$(echo "$LABELS" | grep -E '^major$')
            MINOR_LABEL=$(echo "$LABELS" | grep -E '^minor$')
            PATCH_LABEL=$(echo "$LABELS" | grep -E '^patch$')
            PREVIEW_LABEL=$(echo "$LABELS" | grep -E '^preview$')
        else
            echo No commit to master
            echo "##vso[task.setvariable variable=IsMerge;isOutput=true]false"
            
            LABELS=$(get_labels_from_not_merged_pull_request)
            echo "Got labels from pull request:"
            echo "$LABELS"
            MAJOR_LABEL=$(echo "$LABELS" | grep -E '^major$')
            MINOR_LABEL=$(echo "$LABELS" | grep -E '^minor$')
            PATCH_LABEL=$(echo "$LABELS" | grep -E '^patch$')
            PREVIEW_LABEL=$(echo "$LABELS" | grep -E '^preview$')
        fi


        if [ "$PREVIEW_LABEL" = "preview" ]
        then
            VERSION=$(get_preview_version_tag)
            if [ -z "$VERSION"]
            then
                VERSION=$(get_latest_version_tag)
                if [ "$VERSION" != "" ]
                then
                    NEW_VERSION="${$VERSION}-preview.1"
                    echo "##vso[task.setvariable variable=Version;isOutput=true]$NEW_VERSION"
                    echo "Preview tag created from last version."
                fi
            else
                if [ "$VERSION" =~ ^[0-9]\+\.[0-9]\+\.[0-9]\+\-?.\+\.[0-9]\+$ ] && [ "$MAJOR_LABEL" != "major" ]
                then
                    echo "Pre-release versioning... incrementing preview number"
                    preview_number=`echo $VERSION | awk -F "." '{print $4}'`
                    preview_number=$((preview_number+1))
                    preview_version=`echo $VERSION | awk -F "-" '{print $2}' | awk -F "." '{print $1}'`
                    MAJOR=`echo $VERSION | awk -F "." '{print $1}'`
                    MINOR=`echo $VERSION | awk -F "." '{print $2}'`
                    PATCH=`echo $VERSION | awk -F "." '{print $3}'`
                    NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-${preview_version}.${preview_number}"
                    echo "##vso[task.setvariable variable=Version;isOutput=true]$NEW_VERSION"

                elif [ "$VERSION" =~ ^[0-9]\+\.[0-9]\+\.[0-9]\+\-?[a-zA-Z0-9]\+$ ] && [ "$MAJOR_LABEL" != "major" ]
                then
                    echo "Pre-release versioning, no preview number found... Adding a preview number = 1"
                    - preview_number="1"
                    - preview_version=`echo $VERSION | awk -F "-" '{print $2}'`
                    MAJOR=`echo $VERSION | awk -F "." '{print $1}'`
                    MINOR=`echo $VERSION | awk -F "." '{print $2}'`
                    PATCH=`echo $VERSION | awk -F "." '{print $3}'`
                    NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-${preview_version}.${preview_number}"
                    echo "##vso[task.setvariable variable=Version;isOutput=true]$NEW_VERSION"
                elif [ "$VERSION" =~ ^[0-9]\+\.[0-9]\+\.[0-9]\+\-?.\+\.[0-9]\+$ ] || [ "$VERSION" =~ ^[0-9]\+\.[0-9]\+\.[0-9]\+\-?[a-zA-Z0-9]\+$ ] && [ "$MAJOR_LABEL" = "major" ]
                then
                    NEW_VERSION=`echo $VERSION | awk -F "-" '{print $1}'`
                    echo "##vso[task.setvariable variable=Version;isOutput=true]$NEW_VERSION"
                    echo "Major update from pre-release --> Version is no longer a pre-release."
                else
                    echoerr "Error with pre-release versioning"
                fi
            fi
        
        elif [ "$MAJOR_LABEL" = "major" ] || [ "$MINOR_LABEL" = "minor" ] || [ "$PATCH_LABEL" = "patch" ] || [ "$COMMIT_MESSAGE" = "$CASCADING_BUILD_MESSAGE" ]
        then
            echo "Getting version tag..."
            
            VERSION=$(get_latest_version_tag)"
            echo "Version is = $VERSION"
            NEW_PROJECT=false
            if [ ! "$VERSION" ]
            then
                NEW_PROJECT=true
                VERSION=1.0.0
                echo No version tag found. Setting version to "$VERSION"
            fi
            if [ "$VERSION" =~ ^[0-9]\+\.[0-9]\+\.[0-9]\+$ ]
            then
                MAJOR=`echo $VERSION | awk -F "." '{print $1}'`
                MINOR=`echo $VERSION | awk -F "." '{print $2}'`
                PATCH=`echo $VERSION | awk -F "." '{print $3}'`
                
                if [ "$MAJOR_LABEL" = "major" ] && [ "$NEW_PROJECT" = false ]
                then
                    echo "New major release"
                    MAJOR=$((MAJOR+1))
                    MINOR="0"
                    PATCH="0"
                    echo "##vso[task.setvariable variable=IsMajor;isOutput=true]true"

                elif [ "$MINOR_LABEL" = "minor" ] && [ "$NEW_PROJECT" = false ] && [ "$MAJOR_LABEL" != "major" ]
                then
                    echo "New minor release"
                    MINOR=$((MINOR+1))
                    PATCH="0"
                    echo "##vso[task.setvariable variable=IsMajor;isOutput=true]false"

                elif [ "$PATCH_LABEL" = "patch" ] && [ "$NEW_PROJECT" = false ] && [ "$MINOR_LABEL" != "minor" ] && [ "$MAJOR_LABEL" != "major" ]
                then
                    echo "New patch release"
                    PATCH=$((PATCH+1))
                    echo "##vso[task.setvariable variable=IsMajor;isOutput=true]false"

                
                elif [ "$COMMIT_MESSAGE" = "$CASCADING_BUILD_MESSAGE" ] && [ "$NEW_PROJECT" = false ]
                then
                    echo "New patch release, dependency has been upgraded."
                    PATCH=$((PATCH+1))
                fi

                if  [ "$PREVIEW_LABEL" = "preview" ] && [ "$PATCH_LABEL" != "patch" ] && [ "$MINOR_LABEL" != "minor" ] && [ "$MAJOR_LABEL" != "major" ]
                then
                    echo "Label is [preview] but version tag is not a pre release. Please use [patch] [minor] or [major] label."
                    echo "##vso[task.setvariable variable=Version;isOutput=true]empty" 
                fi
                NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
                echo "##vso[task.setvariable variable=Version;isOutput=true]$NEW_VERSION"
                echo Previous version "$VERSION"
                echo New version "$NEW_VERSION"

            
            else
                echoerr "INVALID VERSION $VERSION ! Please use SymVer syntax for version tags, or let it empty."
                echo "##vso[task.setvariable variable=Version;isOutput=true]empty"
            fi

        else
            echoerr No label triggering new version
            echo "##vso[task.setvariable variable=IsMajor;isOutput=true]false"
            echo "##vso[task.setvariable variable=Version;isOutput=true]empty"
        fi
        
    }
    main

  displayName: Setting version pipeline variable
  name: set_version
  env:
    CASCADING_BUILD_MESSAGE: $(CascadingTriggerMessage)
    
- bash: |
    echo "New version = $(set_version.Version)"
    echo "PullResuest has been merged = $(set_version.IsMerge)"
